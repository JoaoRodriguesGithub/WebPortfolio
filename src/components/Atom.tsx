/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 Atom.gltf --transform --types
Author: Toby_Kershaw (https://sketchfab.com/Toby_Kershaw)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/physics-atom-438f10665243486bb29cff87bea7cd57
Title: Physics Atom
*/

import * as THREE from "three";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    pTorus1_blue_0: THREE.Mesh;
    pSphere1_red_0: THREE.Mesh;
    pTorus2_blue_0: THREE.Mesh;
    pTorus3_blue_0: THREE.Mesh;
  };
  materials: {
    blue: THREE.MeshStandardMaterial;
    material: THREE.MeshStandardMaterial;
  };
};

export default function Model(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("./Atom-transformed.glb") as GLTFResult;
  return (
    <group {...props} dispose={null}>
      <mesh
        geometry={nodes.pTorus1_blue_0.geometry}
        material={materials.blue}
        rotation={[0, 0, Math.PI / 2]}
        scale={[0.02, 0.01, 0.01]}
      />
      <mesh
        geometry={nodes.pSphere1_red_0.geometry}
        material={materials.material}
        scale={0.01}
      />
      <mesh
        geometry={nodes.pTorus2_blue_0.geometry}
        material={materials.blue}
        rotation={[0.87, 0, Math.PI / 2]}
        scale={[0.02, 0.01, 0.01]}
      />
      <mesh
        geometry={nodes.pTorus3_blue_0.geometry}
        material={materials.blue}
        rotation={[2.18, 0, Math.PI / 2]}
        scale={[0.02, 0.01, 0.01]}
      />
    </group>
  );
}

useGLTF.preload("./Atom-transformed.glb");
